<!DOCTYPE html>
                <html>
                <head>
                    <title>Let’s code a Neural Network in plain NumPy</title>
                <?php include_once 'Elemental/header.php'; ?><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><br><br><h5> This article is reformatted from originally published at <a href="https://towardsdatascience.com/lets-code-a-neural-network-in-plain-numpy-ae7e74410795"><strong>TDS(Towards Data Science)</strong></a></h5></br><h5> <a href="https://skalskip.medium.com/?source=post_page-----ae7e74410795--------------------------------">Author : Piotr Skalski</a> </h5></div></div></div></section><section data-bs-version="5.1" class="content4 cid-tt5SM2WLsM" id="content4-2" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="title col-md-12 col-lg-9">
                        <h3 class="mbr-section-title mbr-fonts-style mb-4 display-2">
                            <strong>Let’s code a Neural Network in plain NumPy</h3></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-5 text-muted">Mysteries of Neural Networks Part III</h4></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*fiYPinouczFoVeB6KYqs9Q.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*fiYPinouczFoVeB6KYqs9Q.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*fiYPinouczFoVeB6KYqs9Q.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*fiYPinouczFoVeB6KYqs9Q.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*fiYPinouczFoVeB6KYqs9Q.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*fiYPinouczFoVeB6KYqs9Q.gif 1100w, https://miro.medium.com/v2/resize:fit:1400/1*fiYPinouczFoVeB6KYqs9Q.gif 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*fiYPinouczFoVeB6KYqs9Q.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*fiYPinouczFoVeB6KYqs9Q.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*fiYPinouczFoVeB6KYqs9Q.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*fiYPinouczFoVeB6KYqs9Q.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*fiYPinouczFoVeB6KYqs9Q.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*fiYPinouczFoVeB6KYqs9Q.gif 1100w, https://miro.medium.com/v2/resize:fit:1400/1*fiYPinouczFoVeB6KYqs9Q.gif 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*fiYPinouczFoVeB6KYqs9Q.gif"></picture></div><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>U</span>sing high-level frameworks like Keras, TensorFlow or PyTorch allows us to build very complex models quickly. However, it is worth taking the time to look inside and understand underlying concepts. Not so long ago I published an <a href="https://medium.com/https-medium-com-piotr-skalski92-deep-dive-into-deep-networks-math-17660bc376ba" target="_self">article</a>, explaining — in a simple way — how neural nets work. However, it was highly theoretical post, dedicated primarily to math, which is the source of NN superpower. From the beginning I was planning to follow-up this topic in a more practical way. This time we will try to utilize our knowledge and build a fully operational neural network using only NumPy. Finally, we will also test our model — solve simple classification problem and compare its performance with NN built with Keras.</p></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><strong>Note: </strong>Thanks to the <a href="https://medium.com/@weakish" target="_self">Jakukyo Friel </a>courtesy, you can also read this <a href="https://www.jqr.com/article/000532" target="_self">article</a> in Chinese. Obviously, today’s post will consist in large part of code snippets written in Python. I hope, however, that the reading will not be too boring. :) You will also find short comments in places that I consider to be not clear or worthy of attention. As usual, all the source code is available on my <a href="https://github.com/SkalskiP/ILearnDeepLearning.py" target="_self">GitHub</a>.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*3VNBdeax5uKmbAJuXLShCw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*3VNBdeax5uKmbAJuXLShCw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*3VNBdeax5uKmbAJuXLShCw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*3VNBdeax5uKmbAJuXLShCw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*3VNBdeax5uKmbAJuXLShCw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*3VNBdeax5uKmbAJuXLShCw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*3VNBdeax5uKmbAJuXLShCw.png 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*3VNBdeax5uKmbAJuXLShCw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*3VNBdeax5uKmbAJuXLShCw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*3VNBdeax5uKmbAJuXLShCw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*3VNBdeax5uKmbAJuXLShCw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*3VNBdeax5uKmbAJuXLShCw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*3VNBdeax5uKmbAJuXLShCw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*3VNBdeax5uKmbAJuXLShCw.png 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*3VNBdeax5uKmbAJuXLShCw.png"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 1.</strong> Example of dense neural network architecture</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">First things first</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>B</span>efore we start programming, let’s stop for a moment and prepare a basic roadmap. <strong>Our goal is to create a program capable of creating a densely connected neural network with the specified architecture (number and size of layers and appropriate activation function).</strong> An example of such a network is presented in Figure 1. <strong>Above all, we must be able to train our network and make predictions using it.</strong></p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:79%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 585px" srcset="https://miro.medium.com/v2/resize:fit:640/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 1100w, https://miro.medium.com/v2/resize:fit:1170/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 1170w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 585px" srcset="https://miro.medium.com/v2/resize:fit:640/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 1100w, https://miro.medium.com/v2/resize:fit:1170/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif 1170w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/585/1*I_fAEeJbT_G4hGkXBJ-PcQ.gif"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 2.</strong> Neural network blueprint</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">Diagram above shows what operations will have to be performed during the training of our NN. It also shows how many parameters we will have to update and read at different stages of a single iteration. Building the right data structure and skillfully managing its state is one of the most difficult parts of our task. Due to time limits, I will not describe in detail the role of each of parameters shown in the figure. I refer all those interested to the <a href="https://medium.com/https-medium-com-piotr-skalski92-deep-dive-into-deep-networks-math-17660bc376ba" target="_self">first article of this series</a>, where I hope you will find answers to all the questions that bother you.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*AqqSFy-79trZgyBBjO5e3Q.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*AqqSFy-79trZgyBBjO5e3Q.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*AqqSFy-79trZgyBBjO5e3Q.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*AqqSFy-79trZgyBBjO5e3Q.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*AqqSFy-79trZgyBBjO5e3Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*AqqSFy-79trZgyBBjO5e3Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*AqqSFy-79trZgyBBjO5e3Q.png 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*AqqSFy-79trZgyBBjO5e3Q.png 640w, https://miro.medium.com/v2/resize:fit:720/1*AqqSFy-79trZgyBBjO5e3Q.png 720w, https://miro.medium.com/v2/resize:fit:750/1*AqqSFy-79trZgyBBjO5e3Q.png 750w, https://miro.medium.com/v2/resize:fit:786/1*AqqSFy-79trZgyBBjO5e3Q.png 786w, https://miro.medium.com/v2/resize:fit:828/1*AqqSFy-79trZgyBBjO5e3Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*AqqSFy-79trZgyBBjO5e3Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*AqqSFy-79trZgyBBjO5e3Q.png 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*AqqSFy-79trZgyBBjO5e3Q.png"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 3.</strong> Dimensions of weight matrix <strong>W</strong> and bias vector <strong>b </strong>for layer l.</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">Initiation of neural network layers</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>L</span>et’s start by initiating weight matrix <strong>W</strong> and bias vector <strong>b</strong> for each layer. In Figure 3. I have prepared a small cheatsheet, which will help us to assign the appropriate dimensions for these coefficients. Superscript <em>[l]</em> denotes the index of the current layer (counted from one) and the value n indicates the number of units in a given layer. I assumed that the information describing the NN architecture will be delivered to our program in the form of list similar to the one presented on Snippet 1. Each item in the list is a dictionary describing the basic parameters of a single network layer: <code>input_dim</code> - the size of the signal vector supplied as an input for the layer, <code>output_dim</code> - the size of the activation vector obtained at the output of the layer and <code>activation</code> - the activation function to be used inside the layer.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>nn_architecture = [
    {"input_dim": 2, "output_dim": 4, "activation": "relu"},
    {"input_dim": 4, "output_dim": 6, "activation": "relu"},
    {"input_dim": 6, "output_dim": 6, "activation": "relu"},
    {"input_dim": 6, "output_dim": 4, "activation": "relu"},
    {"input_dim": 4, "output_dim": 1, "activation": "sigmoid"},
]</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 1.</strong> A list containing parameters describing a particular neural network. This list corresponds to the NN shown in Figure 1.</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">If you’re familiar with this subject, you’ve probably already heard a voice in your head speaking with anxious tone: “Hey, hey! Something is wrong! Some of these fields are unnecessary…”. Yeah, your inner voice is right this time. The vector coming out of one layer is also the input for the next one, so in fact it is enough to know the size of only one of those vectors. However, I deliberately decided to use the following notation to keep the objects consistent across all layers and make the code easier to understand for those who encounter these topic for the first time.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def init_layers(nn_architecture, seed = 99):
    np.random.seed(seed)
    number_of_layers = len(nn_architecture)
    params_values = {}

    for idx, layer in enumerate(nn_architecture):
        layer_idx = idx + 1
        layer_input_size = layer["input_dim"]
        layer_output_size = layer["output_dim"]
        
        params_values['W' + str(layer_idx)] = np.random.randn(
            layer_output_size, layer_input_size) * 0.1
        params_values['b' + str(layer_idx)] = np.random.randn(
            layer_output_size, 1) * 0.1
        
    return params_values</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 2. </strong>The function that initiates the values of the weight matrices and bias vectors.</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">Let’s finally focus on the main task that we have to accomplish in this part — the initiation of layers parameters. Those who have already looked at the code on Snippet 2 and have some experience with NumPy have noticed that the matrix <strong>W</strong> and vector <strong>b</strong> have been filled with small, random numbers. This approach is not accidental. Weights values cannot be initialized with the same number because it leads to <strong>breaking symmetry problem</strong>. <strong>Basically, if all weights are the same, no matter what was the input X, all units in the hidden layer will be the same too. </strong>In a way, we got stuck in the initial state without any hope for escape, no matter how long will we train our model and how deep our network is. A linear algebra does not forgive.</p></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">The use of small values increases the efficiency of our algorithm during first iterations. Looking at the graph of the sigmoid function, shown in Figure 4, we can see that it becomes almost flat for large values, what has significant effect on the speed of learning of our NN. All in all parameter initiation using small random numbers is simple approach, but it guarantees <strong>good enough</strong> starting point for our algorithm. Prepared parameters values are stored in a python dictionary with a key that uniquely identifies their parent layer. The dictionary is returned at the end of the function, so we will have access to its contents in the next stages of our algorithm.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*96JGylnPa0YAK1fPYeKXcw.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*96JGylnPa0YAK1fPYeKXcw.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*96JGylnPa0YAK1fPYeKXcw.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*96JGylnPa0YAK1fPYeKXcw.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*96JGylnPa0YAK1fPYeKXcw.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*96JGylnPa0YAK1fPYeKXcw.gif 1100w, https://miro.medium.com/v2/resize:fit:1400/1*96JGylnPa0YAK1fPYeKXcw.gif 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*96JGylnPa0YAK1fPYeKXcw.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*96JGylnPa0YAK1fPYeKXcw.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*96JGylnPa0YAK1fPYeKXcw.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*96JGylnPa0YAK1fPYeKXcw.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*96JGylnPa0YAK1fPYeKXcw.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*96JGylnPa0YAK1fPYeKXcw.gif 1100w, https://miro.medium.com/v2/resize:fit:1400/1*96JGylnPa0YAK1fPYeKXcw.gif 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*96JGylnPa0YAK1fPYeKXcw.gif"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 4. </strong>Activation functions used in the algorithm.</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">Activation functions</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>A</span>mongst all the functions that we will use, there are a few very simple but powerful ones. Activation functions can be written in a single line of code, but they give the neural nets non-linearity and expressiveness that they need. “<mark>Without them, our neural network would become a combination of linear functions, so it would be just a linear function itself</mark>.” There are many activation functions, but in this project I decided to provide the possibility of using two of them — sigmoid and ReLU. To be able to go full circle and pass both forward and backward propagation, we also have to prepare their derivatives.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def sigmoid(Z):
    return 1/(1+np.exp(-Z))

def relu(Z):
    return np.maximum(0,Z)

def sigmoid_backward(dA, Z):
    sig = sigmoid(Z)
    return dA * sig * (1 - sig)

def relu_backward(dA, Z):
    dZ = np.array(dA, copy = True)
    dZ[Z <= 0] = 0;
    return dZ;</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 3.</strong> ReLU and Sigmoid activation functions and their derivatives.</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">Forward propagation</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>T</span>he designed neural network will have a simple architecture. The information flows in one direction — it is delivered in the form of an <strong>X</strong> matrix, and then travels through hidden units, resulting in the vector of predictions <strong>Y_hat</strong>. To make it easier to read, I split forward propagation into two separate functions — step forward for a single layer and step forward for the entire NN.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def single_layer_forward_propagation(A_prev, W_curr, b_curr, activation="relu"):
    Z_curr = np.dot(W_curr, A_prev) + b_curr
    
    if activation is "relu":
        activation_func = relu
    elif activation is "sigmoid":
        activation_func = sigmoid
    else:
        raise Exception('Non-supported activation function')
        
    return activation_func(Z_curr), Z_curr</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 4.</strong> Single layer forward propagation step</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">This part of the code is probably the most straightforward and easy to understand . Given input signal from the previous layer, we compute affine transformation <strong>Z </strong>and then apply selected activation function. By using NumPy, we can leverage vectorization — performing matrix operations, for the whole layer and whole batch of examples at once. This eliminates iteration and significantly speeds up our calculations. In addition to the calculated matrix <strong>A</strong>, our function also returns an intermediate value <strong>Z</strong>. What for? The answer is shown in Figure 2. <strong>We will need Z during the backward step.</strong></p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:43%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 330px" srcset="https://miro.medium.com/v2/resize:fit:640/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 1100w, https://miro.medium.com/v2/resize:fit:660/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 660w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 330px" srcset="https://miro.medium.com/v2/resize:fit:640/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 1100w, https://miro.medium.com/v2/resize:fit:660/1*-1x2XaJPJXR2FsP1DHG0Vg.gif 660w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/330/1*-1x2XaJPJXR2FsP1DHG0Vg.gif"></picture></div><br></div></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*IjEDpxKYBj-cGoEZ3eEDWQ.png 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*IjEDpxKYBj-cGoEZ3eEDWQ.png"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 5. </strong>Dimensions of individual matrices used in a forward step.</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">Using a pre-prepared one layer step forward function, we can now easily build a whole forward propagation step. This is a slightly more complex function, whose role is not only to perform predictions but also to organize the collection of intermediate values. It returns, among other things, Python dictionary, which contains <strong>A</strong> and <strong>Z</strong> values computed for particular layers.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def full_forward_propagation(X, params_values, nn_architecture):
    memory = {}
    A_curr = X
    
    for idx, layer in enumerate(nn_architecture):
        layer_idx = idx + 1
        A_prev = A_curr
        
        activ_function_curr = layer["activation"]
        W_curr = params_values["W" + str(layer_idx)]
        b_curr = params_values["b" + str(layer_idx)]
        A_curr, Z_curr = single_layer_forward_propagation(A_prev, W_curr, b_curr, activ_function_curr)
        
        memory["A" + str(idx)] = A_prev
        memory["Z" + str(layer_idx)] = Z_curr
       
    return A_curr, memory</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 5.</strong> Full forward propagation step</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7"><strong>Loss function</strong></h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>In</span> order to monitor our progress and make sure that we are moving in right direction, we should routinely calculate the value of the loss function. <strong>“Generally speaking, the loss function is designed to show how far we are from the ‘ideal’ solution.” </strong>It is selected according to the problem we plan to solve, and frameworks such as Keras have many options to choose from. Because I am planning to test our NN for the classification of points between two classes, I decided to use binary crossentropy, which is defined by the following formulas. To get more information about the learning process, I have also decided to implement a function that will calculate accuracy.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:41%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 317px" srcset="https://miro.medium.com/v2/resize:fit:640/1*KoIzZjKpNdU-zHkHvrNonA.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*KoIzZjKpNdU-zHkHvrNonA.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*KoIzZjKpNdU-zHkHvrNonA.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*KoIzZjKpNdU-zHkHvrNonA.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*KoIzZjKpNdU-zHkHvrNonA.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*KoIzZjKpNdU-zHkHvrNonA.gif 1100w, https://miro.medium.com/v2/resize:fit:634/1*KoIzZjKpNdU-zHkHvrNonA.gif 634w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 317px" srcset="https://miro.medium.com/v2/resize:fit:640/1*KoIzZjKpNdU-zHkHvrNonA.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*KoIzZjKpNdU-zHkHvrNonA.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*KoIzZjKpNdU-zHkHvrNonA.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*KoIzZjKpNdU-zHkHvrNonA.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*KoIzZjKpNdU-zHkHvrNonA.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*KoIzZjKpNdU-zHkHvrNonA.gif 1100w, https://miro.medium.com/v2/resize:fit:634/1*KoIzZjKpNdU-zHkHvrNonA.gif 634w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/317/1*KoIzZjKpNdU-zHkHvrNonA.gif"></picture></div><br></div></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def get_cost_value(Y_hat, Y):
    m = Y_hat.shape[1]
    cost = -1 / m * (np.dot(Y, np.log(Y_hat).T) + np.dot(1 - Y, np.log(1 - Y_hat).T))
    return np.squeeze(cost)

def get_accuracy_value(Y_hat, Y):
    Y_hat_ = convert_prob_into_class(Y_hat)
    return (Y_hat_ == Y).all(axis=0).mean()</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 6.</strong> Calculating the value of the cost function and accuracy</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">Backward propagation</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>S</span>adly, backward propagation is regarded by many inexperienced deep learning enthusiasts as algorithm that is intimidating and difficult to understand. The combination of differential calculus and linear algebra very often deters people who do not have a solid mathematical training. <strong>So don’t worry too much if you don’t understand everything right away. Trust me, we all went through it.</strong></p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def single_layer_backward_propagation(dA_curr, W_curr, b_curr, Z_curr, A_prev, activation="relu"):
    m = A_prev.shape[1]
    
    if activation is "relu":
        backward_activation_func = relu_backward
    elif activation is "sigmoid":
        backward_activation_func = sigmoid_backward
    else:
        raise Exception('Non-supported activation function')
    
    dZ_curr = backward_activation_func(dA_curr, Z_curr)
    dW_curr = np.dot(dZ_curr, A_prev.T) / m
    db_curr = np.sum(dZ_curr, axis=1, keepdims=True) / m
    dA_prev = np.dot(W_curr.T, dZ_curr)

    return dA_prev, dW_curr, db_curr</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 7.</strong> Single layer backward propagation step</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">Often people confuse backward propagation with gradient descent, but in fact these are two separate matters. The purpose of the first one is to calculate the gradient effectively, whereas the second one is to use the calculated gradient to optimize. In NN, we calculate the gradient of the cost function (discussed earlier) in respect to parameters, but backpropagation can be used to calculate derivatives of any function.<strong> The essence of this algorithm is the recursive use of a chain rule known from differential calculus — calculate a derivative of functions created by assembling other functions, whose derivatives we already know. </strong>This process - for one network layer - is described by the following formulas. Unfortunately, due to the fact that this article focuses mainly on practical implementation, I’ll omit the derivation. Looking at the formulas, it becomes obvious why we decided to remember the values of the <strong>A</strong> and <strong>Z</strong> matrices for intermediate layers in a forward step.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:34%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 268px" srcset="https://miro.medium.com/v2/resize:fit:640/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 1100w, https://miro.medium.com/v2/resize:fit:536/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 536w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 268px" srcset="https://miro.medium.com/v2/resize:fit:640/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 1100w, https://miro.medium.com/v2/resize:fit:536/1*FZ4slpsaH_U0YYhaSRqUEQ.gif 536w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/268/1*FZ4slpsaH_U0YYhaSRqUEQ.gif"></picture></div><br></div></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*K59vganELaktT87x_Dic0Q.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*K59vganELaktT87x_Dic0Q.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*K59vganELaktT87x_Dic0Q.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*K59vganELaktT87x_Dic0Q.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*K59vganELaktT87x_Dic0Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*K59vganELaktT87x_Dic0Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*K59vganELaktT87x_Dic0Q.png 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*K59vganELaktT87x_Dic0Q.png 640w, https://miro.medium.com/v2/resize:fit:720/1*K59vganELaktT87x_Dic0Q.png 720w, https://miro.medium.com/v2/resize:fit:750/1*K59vganELaktT87x_Dic0Q.png 750w, https://miro.medium.com/v2/resize:fit:786/1*K59vganELaktT87x_Dic0Q.png 786w, https://miro.medium.com/v2/resize:fit:828/1*K59vganELaktT87x_Dic0Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*K59vganELaktT87x_Dic0Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*K59vganELaktT87x_Dic0Q.png 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*K59vganELaktT87x_Dic0Q.png"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 6. </strong>Forward and backward propagation for a single layer.</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">Just like in the case of forward propagation, I decided to split the calculations into two separate functions. The first one — shown in Snippet 7 — focuses on a single layer and boils down to rewriting above formulas in NumPy. The second one, representing full backward propagation, deals primarily with key juggling to read and update values in three dictionaries. We start by calculating a derivative of the cost function with respect to the prediction vector — result of forward propagation. This is quite trivial as it only consists of rewriting the following formula. Then iterate through the layers of the network starting from the end and calculate the derivatives with respect to all parameters according to the diagram shown in Figure 6. Ultimately, function returns a python dictionary containing the gradient we are looking for.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:22%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 187px" srcset="https://miro.medium.com/v2/resize:fit:640/1*kquUJYvfxuYAkG7QjuW0_Q.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*kquUJYvfxuYAkG7QjuW0_Q.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*kquUJYvfxuYAkG7QjuW0_Q.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*kquUJYvfxuYAkG7QjuW0_Q.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*kquUJYvfxuYAkG7QjuW0_Q.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*kquUJYvfxuYAkG7QjuW0_Q.gif 1100w, https://miro.medium.com/v2/resize:fit:374/1*kquUJYvfxuYAkG7QjuW0_Q.gif 374w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 187px" srcset="https://miro.medium.com/v2/resize:fit:640/1*kquUJYvfxuYAkG7QjuW0_Q.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*kquUJYvfxuYAkG7QjuW0_Q.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*kquUJYvfxuYAkG7QjuW0_Q.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*kquUJYvfxuYAkG7QjuW0_Q.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*kquUJYvfxuYAkG7QjuW0_Q.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*kquUJYvfxuYAkG7QjuW0_Q.gif 1100w, https://miro.medium.com/v2/resize:fit:374/1*kquUJYvfxuYAkG7QjuW0_Q.gif 374w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/187/1*kquUJYvfxuYAkG7QjuW0_Q.gif"></picture></div><br></div></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def full_backward_propagation(Y_hat, Y, memory, params_values, nn_architecture):
    grads_values = {}
    m = Y.shape[1]
    Y = Y.reshape(Y_hat.shape)
   
    dA_prev = - (np.divide(Y, Y_hat) - np.divide(1 - Y, 1 - Y_hat));
    
    for layer_idx_prev, layer in reversed(list(enumerate(nn_architecture))):
        layer_idx_curr = layer_idx_prev + 1
        activ_function_curr = layer["activation"]
        
        dA_curr = dA_prev
        
        A_prev = memory["A" + str(layer_idx_prev)]
        Z_curr = memory["Z" + str(layer_idx_curr)]
        W_curr = params_values["W" + str(layer_idx_curr)]
        b_curr = params_values["b" + str(layer_idx_curr)]
        
        dA_prev, dW_curr, db_curr = single_layer_backward_propagation(
            dA_curr, W_curr, b_curr, Z_curr, A_prev, activ_function_curr)
        
        grads_values["dW" + str(layer_idx_curr)] = dW_curr
        grads_values["db" + str(layer_idx_curr)] = db_curr
    
    return grads_values</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 8.</strong> Full backward propagation step</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">Updating parameters values</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>T</span>he goal of this method is to update network parameters using gradient optimisation. In this way, we try to bring our target function closer to a minimum. To accomplish this task, we will use two dictionaries provided as function arguments: <code>params_values</code>, which stores the current values of parameters, and <code>grads_values</code>, which stores cost function derivatives calculated with respect to these parameters. Now you only need to apply the following equations for each layer. This is a very simple optimization algorithm, but I decided to use it because it is a great starting point for more advanced optimizers, which will probably be the subject of one of my next articles.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:19%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 162px" srcset="https://miro.medium.com/v2/resize:fit:640/1*y95-RJvW_nV_-AGaKf_t9w.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*y95-RJvW_nV_-AGaKf_t9w.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*y95-RJvW_nV_-AGaKf_t9w.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*y95-RJvW_nV_-AGaKf_t9w.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*y95-RJvW_nV_-AGaKf_t9w.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*y95-RJvW_nV_-AGaKf_t9w.gif 1100w, https://miro.medium.com/v2/resize:fit:324/1*y95-RJvW_nV_-AGaKf_t9w.gif 324w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 162px" srcset="https://miro.medium.com/v2/resize:fit:640/1*y95-RJvW_nV_-AGaKf_t9w.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*y95-RJvW_nV_-AGaKf_t9w.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*y95-RJvW_nV_-AGaKf_t9w.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*y95-RJvW_nV_-AGaKf_t9w.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*y95-RJvW_nV_-AGaKf_t9w.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*y95-RJvW_nV_-AGaKf_t9w.gif 1100w, https://miro.medium.com/v2/resize:fit:324/1*y95-RJvW_nV_-AGaKf_t9w.gif 324w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/162/1*y95-RJvW_nV_-AGaKf_t9w.gif"></picture></div><br></div></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def update(params_values, grads_values, nn_architecture, learning_rate):
    for layer_idx, layer in enumerate(nn_architecture):
        params_values["W" + str(layer_idx)] -= learning_rate * grads_values["dW" + str(layer_idx)]        
        params_values["b" + str(layer_idx)] -= learning_rate * grads_values["db" + str(layer_idx)]

    return params_values;</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 9.</strong> Updating parameters values using gradient descent</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">Putting things together</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>We</span> are finally ready. The most difficult part of the task is behind us— we have prepared all the necessary functions and now we just need to put them together in the correct order. To better understand the sequence of operations, it is worth looking again at the diagram in Figure 2. The function returns optimized weights obtained as a result of the training and the history of the metrics change during the training. In order to make a prediction, you only need to run a full forward propagation using the received weight matrix and a set of test data.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="iframe"><pre>def train(X, Y, nn_architecture, epochs, learning_rate):
    params_values = init_layers(nn_architecture, 2)
    cost_history = []
    accuracy_history = []
    
    for i in range(epochs):
        Y_hat, cashe = full_forward_propagation(X, params_values, nn_architecture)
        cost = get_cost_value(Y_hat, Y)
        cost_history.append(cost)
        accuracy = get_accuracy_value(Y_hat, Y)
        accuracy_history.append(accuracy)
        
        grads_values = full_backward_propagation(Y_hat, Y, cashe, params_values, nn_architecture)
        params_values = update(params_values, grads_values, nn_architecture, learning_rate)
        
    return params_values, cost_history, accuracy_history</pre></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Snippet 10.</strong> Training a model</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">David vs Goliath</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>I</span>t’s high time to see if our model can solve a simple classification problem. I generated a dataset consisting of points belonging to two classes, as shown in Figure 7. Let’s try to teach our model to classify points belonging to this distribution. For comparison, I also prepared a model in a high-level framework — Keras. Both models have the same architecture and learning rate. Still, this is a really uneven fight, as the implementation that we have prepared is probably the simplest possible one. Ultimately, both the NumPy and Keras model achieved similar accuracy of 95% on the test set. However, it took several dozen times longer for our model to reach such a result. In my opinion, this state has been caused primarily by a lack of appropriate optimisation.</p></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*-LncFBAGu9nObJMFbXStyw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*-LncFBAGu9nObJMFbXStyw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*-LncFBAGu9nObJMFbXStyw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*-LncFBAGu9nObJMFbXStyw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*-LncFBAGu9nObJMFbXStyw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*-LncFBAGu9nObJMFbXStyw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*-LncFBAGu9nObJMFbXStyw.png 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*-LncFBAGu9nObJMFbXStyw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*-LncFBAGu9nObJMFbXStyw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*-LncFBAGu9nObJMFbXStyw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*-LncFBAGu9nObJMFbXStyw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*-LncFBAGu9nObJMFbXStyw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*-LncFBAGu9nObJMFbXStyw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*-LncFBAGu9nObJMFbXStyw.png 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*-LncFBAGu9nObJMFbXStyw.png"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 7. </strong>Test dataset</p><br></div></div></div></div></section><section data-bs-version="5.1" class="image3 cid-tt612oXwA9" id="image3-5" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-9">
                <div class="image-wrapper"><div class="image_style" style="width:96%;"><picture><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*tkQMbIDPG02Ps_gqBbO2GA.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*tkQMbIDPG02Ps_gqBbO2GA.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*tkQMbIDPG02Ps_gqBbO2GA.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*tkQMbIDPG02Ps_gqBbO2GA.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*tkQMbIDPG02Ps_gqBbO2GA.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*tkQMbIDPG02Ps_gqBbO2GA.gif 1100w, https://miro.medium.com/v2/resize:fit:1400/1*tkQMbIDPG02Ps_gqBbO2GA.gif 1400w" type="image/webp"/><source data-testid="og" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*tkQMbIDPG02Ps_gqBbO2GA.gif 640w, https://miro.medium.com/v2/resize:fit:720/1*tkQMbIDPG02Ps_gqBbO2GA.gif 720w, https://miro.medium.com/v2/resize:fit:750/1*tkQMbIDPG02Ps_gqBbO2GA.gif 750w, https://miro.medium.com/v2/resize:fit:786/1*tkQMbIDPG02Ps_gqBbO2GA.gif 786w, https://miro.medium.com/v2/resize:fit:828/1*tkQMbIDPG02Ps_gqBbO2GA.gif 828w, https://miro.medium.com/v2/resize:fit:1100/1*tkQMbIDPG02Ps_gqBbO2GA.gif 1100w, https://miro.medium.com/v2/resize:fit:1400/1*tkQMbIDPG02Ps_gqBbO2GA.gif 1400w"/><img alt="" loading="lazy" role="presentation" src="https://miro.medium.com/max/700/1*tkQMbIDPG02Ps_gqBbO2GA.gif"></picture></div><p class="mbr-description mbr-fonts-style mt-2 align-center display-12 text-muted" style="font-size:12px;"><strong>Figure 8. V</strong>isualisation of the classification boundaries achieved with both models</p><br></div></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><h4 class="mbr-section-subtitle mbr-fonts-style mb-4 display-7">Goodbye</h4></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;"><span>I</span> hope that my article has broadened your horizons and increased your understanding of compiled operations taking place inside the neural network. This would be the best reward for the effort I put into creating this post. I admit that I really learned a lot by preparing both code and comments. It is true that nothing teaches as much as getting your hands dirty.</p></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-9"><p class="ff3" style="font-size:22px;">If you have any questions or if you found an error in the source code, please let me know in the comment. And if you like this article follow me on <a href="https://twitter.com/PiotrSkalski92" target="_self">Twitter</a> and <a href="https://medium.com/@piotr.skalski92" target="_self">Medium</a> and see other projects I’m working on, on <a href="https://github.com/SkalskiP" target="_self">GitHub</a> and <a href="https://www.kaggle.com/skalskip" target="_self">Kaggle</a>. This article is the third part of the “Mysteries of Neural Networks” series, if you haven’t had the opportunity yet, read the <a href="https://medium.com/preventing-deep-neural-network-from-overfitting-953458db800a" target="_self">other articles</a>. Stay curious!</p></div></div></div></section><section data-bs-version="5.1" class="content5 cid-tt5UseJ9wk" id="content5-4" style="padding-top:0px; padding-bottom:0px;background-color: rgb(255, 255, 255);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-12 col-lg-10">
            <br>
                <hr class="hr5">
            <br>
            </div>
        </div>
    </div>
</section><section data-bs-version="5.1" class="gallery3 cid-ttaWMCQCls" id="gallery3-7" style="padding-top:0px; padding-bottom:0px; background-color: rgb(255, 255, 255);">
    <div class="container" style="width:60%;"><div class="row mt-4">
            <div class="item features-image сol-12 col-md-6 col-lg-6">
                <div class="item-wrapper" >
                    <div class="item-img"><img src ="https://miro.medium.com/v2/resize:fit:668/format:webp/1*THfv7r3HcS8UstUXqhwaXQ.png" style="height:auto; max-width: 100%;"></div></div></div><br>
            <div class="item features-image сol-12 col-md-6 col-lg-6">
                <div class="item-wrapper" >
                    <div class="item-img"><img src ="https://miro.medium.com/v2/resize:fit:668/format:webp/1*awX2NtjytjzzEzUyc-QTGw.png" style="height:auto; max-width: 100%;"></div></div></div><br>
            <div class="item features-image сol-12 col-md-6 col-lg-6">
                <div class="item-wrapper" >
                    <div class="item-img"><img src ="https://miro.medium.com/v2/resize:fit:668/format:webp/1*uNH7XaccGzx6-Tl02fzB1g.png" style="height:auto; max-width: 100%;"></div></div></div><br></div></div></section><?php include_once 'Elemental/footer.php'; ?>